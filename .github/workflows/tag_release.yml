name: Rust Multi-Platform Build

on:
  push:
    tags:
      - "v*" # Trigger only for version tags like v1.0.0, v2.1.3, etc.

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build on ${{ matrix.os }} (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - os: ubuntu-latest
            target: x86_64
            artifact_name: rusticle
          # - os: ubuntu-latest
          #   target: aarch64
          #   artifact_name: rusticle-arm64

          # macOS targets
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: rusticle-mac
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: rusticle-mac-m1

          # Windows targets
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: rusticle.exe
          # - os: windows-latest
          #   target: aarch64-pc-windows-msvc
          #   artifact_name: rusticle-arm64.exe

    steps:
      - uses: actions/checkout@v4

      # Add these steps for ARM64 Linux cross-compilation
      - name: Install ARM64 dependencies
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          sudo apt-get install -y libssl-dev pkg-config
          sudo apt-get install -y gcc-multilib
          sudo apt-get install -y crossbuild-essential-arm64

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Cache Build
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build project
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Rename binary
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/rusticle artifacts/${{ matrix.artifact_name }}
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: artifacts/${{ matrix.artifact_name }}
          retention-days: 5

  create-release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            **/rusticle*
          generate_release_notes: true
